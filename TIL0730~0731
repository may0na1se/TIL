{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOvGjGwMl6PXpegyir1b6xG"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Bobsz02TACUr"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["## 인스턴스 메서드\n","#### 인스턴스의 상태 조작, 동작 수행\n","- dictionary.get() , list.append() 등등\n","\n"],"metadata":{"id":"AKufQjbUAEpj"}},{"cell_type":"markdown","source":["## 클래스의 상속\n","### 부모클래스의 메서드를 자식 클래스가 사용 가능, 자식클래스만의 메서드와 특성을 정의 가능\n","\n"],"metadata":{"id":"Ad-lLiNQzvCI"}},{"cell_type":"code","source":["import random\n","\n","class Character:\n","    total_players = 0\n","    double_event = True #경험치 2배이벤트\n","\n","    def __init__(self, hp, mp, power, name):\n","        self.hp = hp\n","        self.mp = mp\n","        self.power = power\n","        self.name = name\n","        # Character.total_players += 1\n","        Character.add_player_count()\n","        # self.add_player_count() 로 호출은 되지만 클래스 메소드인지 인스턴스 메소드인지 구분할 수 없음\n","\n","    def attack(self):\n","        print(f\"{self.power}의 데미지로 공격\")\n","\n","    def walk(self):\n","        print(f\"{self.name}이 걸어간다.\")\n","\n","    def check_status(self):\n","        print(\"=========상태창=========\")\n","        print(f\"캐릭터명 : {self.name}\")\n","        print(f\"전체 HP : {self.hp}\")\n","        print(f\"전체 MP : {self.mp}\")\n","        print(f\"데미지 : {self.power}\")\n","        print(\"========================\")\n","\n","    @classmethod\n","    def add_player_count(cls):\n","        cls.total_players += 1\n","    def calculate_critical(power):\n","        if random.random < 0.2:\n","            return power * 1.5\n","\n","class Warrior(Character):\n","\n","    total_players = 0\n","\n","    def __init__(self, hp, mp, power, name):\n","        super().__init__(hp, mp, power, name)\n","        self.hp = hp + 100  #전사는 hp가 100 많도록 오버라이딩\n","        Warrior.add_player_count()\n","\n","    def 칼로때리기(self):\n","        print(f\"{self.name}이(가) 칼로 때려 {self.power * 1.2}의 데미지를 입힘\")\n","\n","    def war_cry(self):\n","        print(f\"{self.name}이(가) 함성을 내질러 자신과 주변 아군의 사기를 강화시킴\")\n","\n","    @classmethod\n","    def add_player_count(cls):\n","        cls.total_players += 1    #cls로 호출하게 되면 warrior 클래스 안의 total_players를 인식하는데,\n","                                #Character.total_players 나 Archer.total_players  도 접근할 수 있음.\n","                                #다른 클래스의 변수를 안 건드리게 하고 싶으면, 해당 변수를 __life __power 처럼 언더바 두 개를 붙임\n","\n","\n","class Archer(Character):\n","\n","    total_players = 0\n","\n","    def __init__(self, hp, mp, power, name):\n","        super().__init__(hp, mp, power, name)\n","        self.power = power + 50\n","        Archer.add_player_count()\n","\n","    @classmethod\n","    def add_player_count(cls):\n","        cls.total_players += 1\n","\n","class Wizard(Character):\n","\n","    total_players = 0\n","\n","    def __init__(self, hp, mp, power, name):\n","        super().__init__(hp, mp, power, name)\n","        self.mp = mp + 100\n","        Wizard.add_player_count()\n","\n","    @classmethod\n","    def add_player_count(cls):\n","        cls.total_players += 1\n","\n","class Operator:\n","    def __init__(self):\n","        self.permission_level = \"운영자\"\n","\n","    def ban(self, target):\n","        print(f\"{target}을 강퇴한다.\")\n","\n","class OperatorWarrior(Operator, Warrior):\n","    def __init__(self, hp, mp, power, name):\n","        Operator.__init__(self)                     #super를 쓰면 mro 순서에 따라 자동 호출하겠지만 다중상속때는 예상치 못하게 작동할 수도\n","        Warrior.__init__(self,hp, mp, power, name)   #다중상속일 때는 클래스를 명시해서 init 호출 하기\n","\n","print(OperatorWarrior.__mro__)\n","\n","oper1 = OperatorWarrior(100, 100, 100, \"영자\")\n","\n","oper1.permission_level\n","oper1.hp\n","\n","\n","\n","# c1 = Character(300, 20, 15, '타락파워전사')\n","# c1.check_status()\n","\n","\n","# w1 = Warrior(300, 20, 15, '타락파워전사')\n","# w1.check_status()\n","# w1.칼로때리기()\n","\n","# print(f\"Total Player Count : {Character.total_players}\")\n","# print(f\"Warrior Player Count : {Warrior.total_players}\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NTS8_39V0vLI","executionInfo":{"status":"ok","timestamp":1753940901476,"user_tz":-540,"elapsed":8,"user":{"displayName":"fidget spinner","userId":"07845832170083969267"}},"outputId":"7aab1f8c-9be5-4432-b54b-897a6ea79e5d"},"execution_count":86,"outputs":[{"output_type":"stream","name":"stdout","text":["(<class '__main__.OperatorWarrior'>, <class '__main__.Operator'>, <class '__main__.Warrior'>, <class '__main__.Character'>, <class 'object'>)\n"]},{"output_type":"execute_result","data":{"text/plain":["200"]},"metadata":{},"execution_count":86}]},{"cell_type":"markdown","source":["# 예외처리 : Try, Except, Else, Finally\n","\n","### except Exception  - 모든 예외를 포함하는 범용적인 처리이므로, 먼저 사용해 버리면 모든 예외가 다 처리되어 다음 예외처리 코드로 넘어가지 못함"],"metadata":{"id":"wMFpFimDISYo"}}]}